import sys
from urllib.parse import urlparse
import urllib.parse
import csv
import scraper

# Starter code for downloading song lyrics.  To search for a song that contains the phrase
# "road to nowhere", you can call it like this:
# > python lyrics.py road to nowhere


# First, grab the results page from the search
URL_BASE = 'https://finance.yahoo.com/quote/'
URL_END = '/history'
URL_MIDDLE = " ".join(sys.argv[1:2])
URL_Sec = " ".join(sys.argv[2:])
print(URL_MIDDLE, URL_Sec)
#URL_MIDDLE = "AAPL"
url = URL_BASE+URL_MIDDLE+URL_END
stock_scrape = scraper.UrlScraper(url)

# Parse out the artist, song, and url from the top search result.  The code below captures the name
# of the song; you'll need to modify it to grab the artist and url for the lyrics page as well.
#
# lyrics_scrape.move_to('data-reactid="25">')
# song = lyrics_scrape.pull_from_to('<b>', '</b>')
# print("Found '{}'".format(song))


Date = stock_scrape.pull_from_to('<span data-reactid="35">','</span>')
Open = stock_scrape.pull_from_to('<span data-reactid="37">','</span>')
High = stock_scrape.pull_from_to('<span data-reactid="39">','</span>')
Low = stock_scrape.pull_from_to('<span data-reactid="41">','</span>')
Close = stock_scrape.pull_from_to('<span data-reactid="43">','</span>')
AdjClose = stock_scrape.pull_from_to('<span data-reactid="45">','</span>')
Vol = stock_scrape.pull_from_to('<span data-reactid="47">','</span>')
rows = [Date, Open, High, Low, Close, AdjClose, Vol]
print('Date: {} Open: {} High: {} Low: {} Close: {} AdjClose: {} Vol: {}'.format(Date, Open, High, Low, Close, AdjClose, Vol))
wtr = csv.writer(open ('out.csv', 'w'), delimiter=',', lineterminator='\n')
wtr.writerow (rows)
for x in range(99):
    if(x<49):   #first dividend
        Date = stock_scrape.pull_from_to('<span data-reactid="'+str(x*15 + 51)+'">', '</span>')
        Open = stock_scrape.pull_from_to('<span data-reactid="'+str(x*15 + 53)+'">', '</span>')
        High = stock_scrape.pull_from_to('<span data-reactid="'+str(x*15 + 55)+'">', '</span>')
        Low = stock_scrape.pull_from_to('<span data-reactid="'+str(x*15 + 57)+'">', '</span>')
        Close = stock_scrape.pull_from_to('<span data-reactid="'+str(x*15 + 59)+'">', '</span>')
        AdjClose = stock_scrape.pull_from_to('<span data-reactid="' + str(x*15 + 61)+'">', '</span>')
        Vol = stock_scrape.pull_from_to('<span data-reactid="' + str(x*15 + 63)+'">', '</span>')
        rows = [Date, Open, High, Low, Close, AdjClose, Vol]
        wtr.writerow(rows)
    if(x>=49):   #second dividend
        Date = stock_scrape.pull_from_to('<span data-reactid="' + str(x * 15 + 58) + '">', '</span>')
        Open = stock_scrape.pull_from_to('<span data-reactid="' + str(x * 15 + 60) + '">', '</span>')
        High = stock_scrape.pull_from_to('<span data-reactid="' + str(x * 15 + 62) + '">', '</span>')
        Low = stock_scrape.pull_from_to('<span data-reactid="' + str(x * 15 + 64) + '">', '</span>')
        Close = stock_scrape.pull_from_to('<span data-reactid="' + str(x * 15 + 66) + '">', '</span>')
        AdjClose = stock_scrape.pull_from_to('<span data-reactid="' + str(x * 15 + 68) + '">', '</span>')
        Vol = stock_scrape.pull_from_to('<span data-reactid="' + str(x * 15 + 70) + '">', '</span>')
        rows = [Date, Open, High, Low, Close, AdjClose, Vol]
        wtr.writerow(rows)
